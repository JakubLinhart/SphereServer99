[function test_safe]
serv.smsg "test_safe\n"

serv.smsg "      testing incorrect scripts....\n"
safe asdf
safe #$%@#$(())

safe arg(a1,123)
ShouldBeSameString("without parentheses",123,<arg(a1)>)
safe(arg(a2,111))
ShouldBeSameString("with parentheses",111,<arg(a2)>)
safe.arg(a3,321)
ShouldBeSameString("with dot",321,<arg(a3)>)

arg(a4,321)
ShouldBeSamestring("local variable from macro",321,<safe arg(a4)>)
ShouldBeSamestring("local variable from macro, safe with dot",321,<safe.arg(a4)>)
ShouldBeSamestring("local variable from macro, safe with parentheses",321,<safe(arg(a4))>)

var(v4,123)
ShouldBeSamestring("global variable from macro",123,<safe var(v4)>)
ShouldBeSamestring("global variable from macro, safe with dot",123,<safe.var(v4)>)
ShouldBeSamestring("global variable from macro, safe with parentheses",123,<safe(var(v4))>)

ShouldBeSamestring("failed safe is 0 at expression start",10,<eval safe(asdf)+10>)
ShouldBeSamestring("failed safe is 0 at expression end",10,<eval 10+safe(asdf)>)

ShouldBeSamestring("non-existing variable from macro","","<safe var(nonexistingvar)>")
ShouldBeSamestring("failure from macro","",<safe thisisafailure>)

if (<safe this_is_a_failure>)
    tst_fail("safe in condition inside macro")
else
    tst_success("safe in condition inside macro")
endif

arg(number,"1")
if (safe arg(number))
    tst_success("safe in condition without macro")
else
    tst_fail("safe in condition without macro")
endif

if (safe this is a failure)
    tst_fail("save in condition without macro - fail")
else
    tst_success("save in condition without macro - fail")
endif

if (safe(arg(number)))
    tst_success("safe in condition with parentheses without macro")
else
    tst_fail("safe in condition with parentheses without macro")
endif

if (safe(this is a failure))
    tst_fail("save in condition without macro with parentheses - fail")
else
    tst_success("save in condition without macro with parentheses - fail")
endif

arg(prefix,"findres(skill,")
arg(suffix,"+5).defname")
arg(number,"1")

ShouldBeSameString("r_verb macro with safe",SKILL_Begging,<safe <arg(prefix)><arg(number)><arg(suffix)>>)

finduid(0D728A).test_safe_chained

var(function_was_called,no)
safe f_was_function_call
ShouldBeSameString("r_verb call without parentheses, without arguments",yes,<var(function_was_called)>)

var(function_was_called,no)
safe(f_was_function_call)
ShouldBeSameString("r_verb call with parentheses, without arguments",yes,<var(function_was_called)>)

var(function_was_called,no)
safe(f_was_function_call(qwer))
ShouldBeSameString("r_verb call with parentheses, with arguments with parentheses",qwer,<var(function_was_called)>)

arg(color,111)
safe(finduid(010000).findid(i_backpack).color=arg(color))
ShouldBeTrue("assignment with parentheses",<eval 111==<finduid(010000).findid(i_backpack).color>>)

arg(color,321)
safe finduid(010000).findid(i_backpack).color=arg(color)
ShouldBeTrue("assignment without parentheses",<eval 321==<finduid(010000).findid(i_backpack).color>>)

safe(finduid(010000).findid(i_backpack).resource=asd)

serv.smsg "\n"

[function test_safe_chained]
p_x=5398
ShouldBeSamestring("r_write object property","5398","<safe p_x>")
ShouldBeSamestring("r_write object property - with parentheses","5398","<safe(p_x)>")
ShouldBeSamestring("r_write object property - with dot","5398","<safe.p_x>")
ShouldBeSamestring("r_write object property failed","","<safe blabla>")
