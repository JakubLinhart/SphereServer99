[function test_tags]
serv.smsg "test_tags\n"

finduid(010000).tag(tag1,123)
ShouldBeSameString("tag's numeric value","123",<finduid(010000).tag(tag1)>)
finduid(010000).tag(tag1,stringValue)
ShouldBeSameString("tag's unquoted string value",stringValue,<finduid(010000).tag(tag1))>)

finduid(010000).tag(tag1,"quoted string value")
ShouldBeSameString("tag's quoted string value","quoted string value",<finduid(010000).tag(tag1)>)
finduid(010000).tag(tag2     ,1)
ShouldBeSameString("ignores whitespace after tag name in assignment",1,<finduid(010000).tag(tag2)>)
finduid(010000).tag(tag2,123)
ShouldBeSameString("ignores whitespace before and after tag name",123,<finduid(010000).tag(   tag2   )>)
finduid(010000).tag(tag2,#+1)
ShouldBeSameString("evaluates sharp replacement expression for tag",124,<finduid(010000).tag(tag2)>)
finduid(010000).tag(tag2,1+#)
ShouldBeSameString("no evaluation for tag when sharp not on first index","1+#",<finduid(010000).tag(tag2)>)
finduid(010000).tag.tag2=321
ShouldBeSameString("chained tag assignment and read",321,<finduid(010000).tag.tag2>)
finduid(010000).tag.tag2=#+1
ShouldBeSameString("chained tag sharp replacement",322,<finduid(010000).tag.tag2>)

finduid(010000).tag(tag2,"asdf")
ShouldBeSameString("no doublequotes for doublequoted value",asdfasdfasdf,<finduid(010000).tag(tag2)><finduid(010000).tag(tag2)><finduid(010000).tag(tag2)>)

finduid(010000).tag(tag3,#010000)
ShouldBeSameString("chained call on tag","DrZhor",<finduid(010000).tag(tag3).name>)

finduid(010000).tag(tag4,123)
finduid(010000).tag.remove(tag4)
ShouldBeSameString("remove tag",0,<eval strlen(<finduid(010000).tag(tag4)>)>)

ShouldBeSameString("invalid tag value","",<finduid(010000).tag(npc_knockback)>)

finduid(010000).tag(tag4, asdf)
ShouldBeSameString("value prefixed with whitespace"," asdf",<finduid(010000).tag(tag4)>)

finduid(010000).tag(tag4,"1+1")
ShouldBeSameString("doublequoted expression","1+1","<finduid(010000).tag(tag4)>")

finduid(010000).tag.remove(nonexistingtag)
ShouldBeSameString("eval of nonexisting tag",0,<eval finduid(010000).tag(nonexistingtag)>)
finduid(010000).tag.remove(nonexistingtag[1])
ShouldBeSameString("eval of nonexisting tag",0,<eval finduid(010000).tag(nonexistingtag[1])>)
finduid(010000).tag.nonexistingtag=#+1
ShouldBeSameString("increment of nonexisting tag","#+1",<finduid(010000).tag(nonexistingtag)>)

finduid(010000).tag(indexedtag[10],321)
ShouldBeSameString("set/get indexed tag value, brackets","321",<finduid(010000).tag(indexedtag[10])>)
finduid(010000).tag(indexedtag_10,123)
ShouldBeSameString("set/get indexed tag value, underscore","123",<finduid(010000).tag(indexedtag_10)>)
finduid(010000).tag(indexedtag_9,333)
ShouldBeSameString("set/get indexed tag value, underscore/brackets","333",<finduid(010000).tag(indexedtag[9])>)
arg(index,11)
finduid(010000).tag(indexedtag[arg(index)],321)
ShouldBeSameString("set/get indexed tag value","321",<finduid(010000).tag(indexedtag[11])>)
arg(index,12)
// Doesn't work on Sphere99
// finduid(010000).tag(indexedtag_arg(index),666)
// ShouldBeSameString("set/get indexed tag value, underscore","321",<finduid(010000).tag(indexedtag[12])>)

arg(index,2)
arg(indexOfIndex[2],1)
finduid(010000).tag(indexedTag[indexOfIndex[index]],zzz)
ShouldBeSameString("set/get nested index",zzz,<finduid(010000).tag(indexedTag[arg(indexOfIndex[index])])>)
ShouldBeSameString("set/get nested index - constant index read",zzz,<finduid(010000).tag(indexedTag[1])>)

finduid(010000).tag(indexedTag[2],xxx)
ShouldBeSameString("function call index",xxx,<finduid(010000).tag(indexedTag[return_first_arg(2)])>)
ShouldBeSameString("function call index with two arguments",xxx,<finduid(010000).tag(indexedTag[return_first_arg(2,123)])>)

var(function_was_called,0)
finduid(010000).tag(localTag,#010000)
finduid(010000).tag(localTag).f_was_function_call
ShouldBeSameString("chained tag parameterless call",yes,<var(function_was_called)>)

finduid(010000).tag(localTag).p=5397,2550
ShouldBeSameString("set chained tag value containing commas on char","5397,2550","<finduid(010000).tag(localTag).p>")

finduid(010000).test_tags_nonchained
test_tags_on_arguments(<finduid(010000)>)

arg(player,<finduid(010000)>)
player.tag(testtag,onunspecifiedlocalvar)
ShouldBeSameString("tag on unspecified local var",onunspecifiedlocalvar,<player.tag(testtag)>)

// Doesn't work on Sphere99
// finduid(010000).tag(tag3,#010000)
// ShouldBeSameString("chained call on tag","DrZhor",<finduid(010000).tag3.name>)


serv.smsg "\n"

[function test_tags_nonchained]
tag(localTag2,#010000)
tag(localTag2).f_was_function_call
ShouldBeSameString("r_verb - chained tag parameterless call",yes,<var(function_was_called)>)

tag(experience,123)
ShouldBeSameString("r_verb - tag in eval",123,<eval tag(experience)>)

var(function_was_called,no)
tag(localTag,"f_was_function")
src=<finduid(010000)>
<src.tag(localTag)>_call
ShouldBeSameString("tag in macro r_verb",yes,<var(function_was_called)>)

tag(tagWithIndex,2)
tag(tagWithValue[tag(tagWithIndex)],value3)
ShouldBeSameString("index with unchained tag",value3,<tag(tagWithValue[tag(tagWithIndex)])>)

[function test_tags_on_arguments]
argv(0).tag(testtag,testvalue)
ShouldBeSameString("set/get tag on argument",testvalue,<argv(0).tag(testtag)>)
