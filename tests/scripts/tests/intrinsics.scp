[function test_intrinsics]

serv.smsg "test_intrinsics\n"

test_intrinsics_strcmp
test_intrinsics_strlen
test_strcmpi
test_strmatch
test_intrinsics_isbit

serv.smsg "\n"

[function test_strmatch]
ShouldBeTrue("strmacth - exact match","strmatch(123,123)")
ShouldBeTrue("strmacth - group pattern match","strmatch(1,[123])")

arg(result,<eval strmatch("123",[123][123][123])>)
ShouldBeTrue("strmacth - exact match - doublequoted argument",<arg(result)>)
arg(result,<eval strmatch(123,"[123][123][123]")>)
ShouldBeTrue("strmacth - exact match - doublequoted pattern",<arg(result)>)
arg(result,<eval strmatch("123","[123][123][123]")>)
ShouldBeTrue("strmacth - exact match - both doublequoted",<arg(result)>)

ShouldBeFalse("strmacth - first char mismatch","strmatch(123,223)")
ShouldBeFalse("strmacth - first char mismatch, group pattern","strmatch(4,[123])")

[function test_strcmpi]
ShouldBeSameString("strcmpi - same quoted string",0,<strcmpi("asdf","asdf")>)
ShouldBeSameString("strcmpi - same quoted string, different casing",0,<strcmpi("asdf","ASDF")>)
ShouldBeSameString("strcmpi - same string",0,<strcmpi(asdf,asdf)>)
ShouldBeSameString("strcmpi - same string, different casing",0,<strcmpi(asdf,ASDF)>)

if (<strcmpi(asdf,qwer)>)
  tst_success("strcmpi - different strings")
else
  tst_fail("strcmpi - different strings")
endif

ShouldBeSameString("strcmpi - eval - same quoted string",0,<eval strcmpi("asdf","asdf")>)
ShouldBeSameString("strcmpi - eval - same quoted string, different casing",0,<eval strcmpi("asdf","ASDF")>)
ShouldBeSameString("strcmpi - eval - same string",0,<eval strcmpi(asdf,asdf)>)
ShouldBeSameString("strcmpi - eval - same string, different casing",0,<eval strcmpi(asdf,ASDF)>)

if (<eval strcmpi(asdf,qwer)>)
  tst_success("strcmpi - eval - different strings")
else
  tst_fail("strcmpi - eval - different strings")
endif

[function test_intrinsics_strcmp]
// Cannot use ShouldBeSameString, because ShouldBeSameString depends on strcmp functionality.
// If stcmp is broken, then ShouldBeSameString is broken also and may not detect any problem.
if (strcmp("asdf","asdf"))
  tst_fail("strcmp - returns false when equals quoted arguments")
else
  tst_success("strcmp - returns false when equals quoted arguments")
endif

if (strcmp("asdf",asdf))
  tst_fail("strcmp - returns false when equals for quoted and unquoted arguments")
else
  tst_success("strcmp - returns false when equals for quoted and unquoted arguments")
endif

if (strcmp(asdf,asdf))
  tst_fail("strcmp - returns false when equals for unquoted arguments")
else
  tst_success("strcmp - returns false when equals for unquoted arguments")
endif

if (strcmp("asdf","qwer"))
  tst_success("strcmp - returns true when not equals")
else
  tst_fail("strcmp - returns true when not equals")
endif

ShouldBeSameString("strcmp outside eval - returns 0 when equals quoted arguments",0,<strcmp("asdf","asdf")>)
ShouldBeSameString("strcmp outside eval - returns 0 when equals for quoted and unquoted arguments",0,<strcmp("asdf",asdf)>)
ShouldBeSameString("strcmp outside eval - returns 0 when equals for unquoted arguments",0,<strcmp(asdf,asdf)>)
ShouldBeSameString("strcmp outside eval - returns -1 when not equals",-1,<strcmp("asdf","qwer")>)

[function test_intrinsics_strlen]
ShouldBeSameString("strlen - length of empty string is 0",0,<eval strlen()>)
ShouldBeSameString("strlen - length of quoted empty string is 0",0,<eval strlen("")>)
ShouldBeSameString("strlen - quoted argument",4,<eval strlen("qwer")>)
ShouldBeSameString("strlen - unquoted argument",4,<eval strlen(qwer)>)

ShouldBeSameString("strlen outside eval - length of empty string is 0",0,<strlen()>)
ShouldBeSameString("strlen outside eval - length of quoted empty string is 0",0,<strlen("")>)
ShouldBeSameString("strlen outside eval - quoted argument",4,<strlen("qwer")>)
ShouldBeSameString("strlen outside eval - unquoted argument",4,<strlen(qwer)>)

[function test_intrinsics_isbit]
ShouldBeSameString("isbit - const arguments, result 1",1,<isbit(4,2)>)
ShouldBeSameString("isbit - const arguments, result 0",0,<isbit(4,1)>)

[function xxx]
serv.smsg(<fixnumber(1)>)

[function fixNumber]
serv.smsg "'<args>'\n"

arg(len,<strlen(<args>)>)
if (len<=0)
  return 0
endif

arg(pattern,[-0123456789])
while (arg(len)>1)
  arg(pattern,"<arg(pattern)>[-0123456789]")
  arg(len,<eval arg(len)-1>)
endwhile

serv.smsg("pattern: '<arg(pattern)>'\n")
serv.smsg("args: '<args>'\n")
if (STRMATCH(<args>,<arg(pattern)>))
 return <eval args>
else
 serv.smsg("Mozny pokus o podvod s chybnym prikazem '<args>'\n")
 return 0
endif